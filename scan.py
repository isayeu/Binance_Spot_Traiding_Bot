import urwid
import asyncio
import os
import numpy as np
import talib
import logging
from binance.client import Client
from config import load_config
import aiohttp
import nest_asyncio


logging.basicConfig(
    filename='scan.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

config = load_config()
api_key = config['api_key']
api_secret = config['api_secret']
token = config['telegram_token']
chat_id = config['telegram_chat_id']

client = Client(api_key, api_secret)

PAIRS_TO_SCAN = 'scan_list'
TRADING_PAIRS_FILE = 'trading_pairs.txt'
interval = config['interval']
existing_pairs_limit = int(config['existing_pairs_limit'])
rsi_to_add = int(config['rsi_to_add'])
limit = 200
CACHE_TTL = 60

data_cache = {}


async def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, data=payload) as response:
                if response.status == 200:
                    logging.info("Message successfully sent to Telegram")
                else:
                    logging.error(f"Error sending message to Telegram: {response.status}")
        except Exception as e:
            logging.error(f"Error sending message to Telegram: {e}")


async def get_pairs_to_scan():
    if os.path.exists(PAIRS_TO_SCAN):
        with open(PAIRS_TO_SCAN, 'r') as f:
            pairs = [line.strip() for line in f if line.strip()]
            return pairs
    logging.warning("The file containing the list of pairs to scan was not found.")
    return []


def calculate_rsi(closes):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI."""
    return talib.RSI(np.array(closes, dtype=float), timeperiod=14)[-1]


async def fetch_klines(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    current_time = asyncio.get_event_loop().time()
    if symbol in data_cache and current_time - data_cache[symbol]['timestamp'] < CACHE_TTL:
        return data_cache[symbol]['data']

    try:
        async with aiohttp.ClientSession() as session:
            url = f'https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}'
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    closes = [float(kline[4]) for kline in data]
                    data_cache[symbol] = {'data': closes, 'timestamp': current_time}
                    return closes
    except Exception as e:
        logging.error(f"Error retrieving data for {symbol}: {e}")
        return []


async def process_pair(pair, existing_pairs_in_file, top_pairs):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É."""
    closes = await fetch_klines(pair)
    if closes:
        rsi = calculate_rsi(closes)
        if rsi <= rsi_to_add and pair not in existing_pairs_in_file:
            with open(TRADING_PAIRS_FILE, 'a') as f:
                f.write(f"{pair}\n")
            logging.info(f"New pair added: {pair} —Å RSI {rsi:.2f}")
            existing_pairs_in_file.append(pair)
            await send_telegram_message(f"üÜï New pair added: {pair} —Å RSI {rsi:.2f}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∞
        existing_pair = next((p for p in top_pairs if p[0] == pair), None)
        if existing_pair:
            top_pairs.remove(existing_pair)
        top_pairs.append((pair, rsi))
        return pair, rsi
    return None


async def scan_and_update(pairs, widget, loop):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI."""
    while True:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
        existing_pairs_in_file = []
        if os.path.exists(TRADING_PAIRS_FILE):
            with open(TRADING_PAIRS_FILE, 'r') as f:
                existing_pairs_in_file = f.read().splitlines()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä
        while len(existing_pairs_in_file) >= existing_pairs_limit:
            logging.info(f"Limit reached {existing_pairs_limit} pairs. Waiting for space to become available...")
            await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä
            with open(TRADING_PAIRS_FILE, 'r') as f:
                existing_pairs_in_file = f.read().splitlines()

        top_pairs = []

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä
        tasks = [
            process_pair(pair, existing_pairs_in_file, top_pairs)
            for pair in pairs
        ]
        await asyncio.gather(*tasks)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ trading_pairs.txt
        filtered_top_pairs = [
            (symbol, rsi) for symbol, rsi in top_pairs
            if symbol not in existing_pairs_in_file
        ]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ø –ø–∞—Ä—ã –ø–æ RSI
        filtered_top_pairs = sorted(
            filtered_top_pairs,
            key=lambda x: x[1]
        )[:(existing_pairs_limit - len(existing_pairs_in_file))]

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        widget.body[:] = make_table(filtered_top_pairs).body
        loop.draw_screen()


def make_table(top_pairs):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º urwid."""
    # –°—Ç–∏–ª–∏ urwid
    palette = [
        ('low_rsi', 'light green', 'default'),
        ('medium_rsi', 'yellow', 'default'),
        ('high_rsi', 'light red', 'default'),
        ('blue_text', 'light blue', 'default'),
        ('green_text', 'light green', 'default'),
        ('symbol_text', 'light cyan', 'default'),
        ('default', 'default', 'default'),
    ]

    rows = [urwid.Text([
        ('blue_text', "Top Pairs with Lowest RSI. Threshold: "),
        ('green_text', f"{rsi_to_add} ")
    ])]

    for symbol, rsi in top_pairs:
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å—Ç–∏–ª—å –¥–ª—è RSI
        if rsi <= 30:
            rsi_style = 'low_rsi'
        elif 30 < rsi <= 70:
            rsi_style = 'medium_rsi'
        else:
            rsi_style = 'high_rsi'

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π
        rows.append(urwid.Text([
            ('symbol_text', f"{symbol:<10}"),  # –°–∏–º–≤–æ–ª –ø–∞—Ä—ã, –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–π –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            (rsi_style, f" RSI: {rsi:>5.2f}"),  # RSI, —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
        ]))

    return urwid.ListBox(urwid.SimpleFocusListWalker(rows))


async def main(loop):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    pairs = await get_pairs_to_scan()
    if not pairs:
        logging.error("The list of pairs to scan is empty.")
        return

    placeholder = urwid.Text("Loading...")
    widget = urwid.ListBox(urwid.SimpleFocusListWalker([placeholder]))

    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É –≤ MainLoop
    palette = [
        ('low_rsi', 'light green', 'default'),
        ('medium_rsi', 'yellow', 'default'),
        ('high_rsi', 'light red', 'default'),
        ('blue_text', 'light blue', 'default'),
        ('green_text', 'light green', 'default'),
        ('symbol_text', 'light cyan', 'default'),
        ('default', 'default', 'default'),
    ]

    main_loop = urwid.MainLoop(widget, event_loop=loop, unhandled_input=exit_on_q, palette=palette)

    asyncio.ensure_future(scan_and_update(pairs, widget, main_loop))
    main_loop.run()


def display_top_pairs():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø-5 –ø–∞—Ä —Å –ø–æ–º–æ—â—å—é urwid."""
    nest_asyncio.apply()
    loop = urwid.AsyncioEventLoop()
    try:
        asyncio.run(main(loop))
    except RuntimeError as e:
        logging.critical(f"Error starting interface: {e}")


def exit_on_q(key):
    """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ 'q'."""
    if key in ('q', 'Q'):
        raise urwid.ExitMainLoop()


if __name__ == '__main__':
    try:
        logging.info("Launching the application.")
        display_top_pairs()
    except Exception as e:
        logging.critical(f"Critical application error: {e}")
